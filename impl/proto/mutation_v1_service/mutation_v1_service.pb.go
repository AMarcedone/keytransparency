// Code generated by protoc-gen-go.
// source: mutation_v1_service.proto
// DO NOT EDIT!

/*
Package mutation_v1_service is a generated protocol buffer package.

Mutation Service

The Key Transparency mutation server service consists of APIs to fetch
mutations.

It is generated from these files:
	mutation_v1_service.proto

It has these top-level messages:
*/
package mutation_v1_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keytransparency_v1_types "github.com/google/keytransparency/core/proto/keytransparency_v1_types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MutationService service

type MutationServiceClient interface {
	// GetMutations returns a list of mutations in a specific epoch.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutations(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error)
	// GetMutationsStream is a streaming API similar to GetMutations.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutationsStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (MutationService_GetMutationsStreamClient, error)
}

type mutationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMutationServiceClient(cc *grpc.ClientConn) MutationServiceClient {
	return &mutationServiceClient{cc}
}

func (c *mutationServiceClient) GetMutations(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error) {
	out := new(keytransparency_v1_types.GetMutationsResponse)
	err := grpc.Invoke(ctx, "/mutation.v1.service.MutationService/GetMutations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationServiceClient) GetMutationsStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (MutationService_GetMutationsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MutationService_serviceDesc.Streams[0], c.cc, "/mutation.v1.service.MutationService/GetMutationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mutationServiceGetMutationsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MutationService_GetMutationsStreamClient interface {
	Recv() (*keytransparency_v1_types.GetMutationsResponse, error)
	grpc.ClientStream
}

type mutationServiceGetMutationsStreamClient struct {
	grpc.ClientStream
}

func (x *mutationServiceGetMutationsStreamClient) Recv() (*keytransparency_v1_types.GetMutationsResponse, error) {
	m := new(keytransparency_v1_types.GetMutationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MutationService service

type MutationServiceServer interface {
	// GetMutations returns a list of mutations in a specific epoch.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutations(context.Context, *keytransparency_v1_types.GetMutationsRequest) (*keytransparency_v1_types.GetMutationsResponse, error)
	// GetMutationsStream is a streaming API similar to GetMutations.
	//
	// Returns a list of mutations and their inclusion proofs along with the epoch
	// signed map root.
	GetMutationsStream(*keytransparency_v1_types.GetMutationsRequest, MutationService_GetMutationsStreamServer) error
}

func RegisterMutationServiceServer(s *grpc.Server, srv MutationServiceServer) {
	s.RegisterService(&_MutationService_serviceDesc, srv)
}

func _MutationService_GetMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.GetMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServiceServer).GetMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mutation.v1.service.MutationService/GetMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServiceServer).GetMutations(ctx, req.(*keytransparency_v1_types.GetMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutationService_GetMutationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(keytransparency_v1_types.GetMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MutationServiceServer).GetMutationsStream(m, &mutationServiceGetMutationsStreamServer{stream})
}

type MutationService_GetMutationsStreamServer interface {
	Send(*keytransparency_v1_types.GetMutationsResponse) error
	grpc.ServerStream
}

type mutationServiceGetMutationsStreamServer struct {
	grpc.ServerStream
}

func (x *mutationServiceGetMutationsStreamServer) Send(m *keytransparency_v1_types.GetMutationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MutationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mutation.v1.service.MutationService",
	HandlerType: (*MutationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMutations",
			Handler:    _MutationService_GetMutations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMutationsStream",
			Handler:       _MutationService_GetMutationsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mutation_v1_service.proto",
}

func init() { proto.RegisterFile("mutation_v1_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x49, 0x17, 0x2e, 0x86, 0x82, 0xf8, 0xba, 0x6a, 0x70, 0xe5, 0xde, 0x79, 0x46, 0x0f,
	0xe1, 0xca, 0x8d, 0x3d, 0x40, 0x99, 0x8e, 0x8f, 0x34, 0x68, 0xe6, 0x8d, 0xf3, 0x5e, 0x02, 0x59,
	0xea, 0x09, 0x04, 0x2f, 0xe1, 0x7d, 0xbc, 0x82, 0x07, 0x91, 0x26, 0x53, 0x2c, 0x05, 0xc1, 0x8d,
	0xdb, 0x7c, 0x3f, 0xef, 0xfb, 0x32, 0x66, 0xd9, 0x76, 0xea, 0xb4, 0xe1, 0xb0, 0xee, 0xab, 0xb5,
	0x50, 0xea, 0x1b, 0x4f, 0x36, 0x26, 0x56, 0x86, 0xc5, 0x1e, 0xd9, 0xbe, 0xb2, 0x19, 0x95, 0x0f,
	0x75, 0xa3, 0xdb, 0x6e, 0x63, 0x3d, 0xb7, 0x58, 0x33, 0xd7, 0x4f, 0x84, 0x8f, 0x34, 0x68, 0x72,
	0x41, 0xa2, 0x4b, 0x14, 0xfc, 0x80, 0x9e, 0x13, 0xe1, 0x78, 0xe2, 0x18, 0xed, 0x1c, 0x3a, 0x44,
	0x92, 0x5f, 0xc1, 0xa4, 0x2e, 0xcf, 0xf3, 0x69, 0x17, 0x1b, 0x74, 0x21, 0xf0, 0xd4, 0x91, 0xe9,
	0xf5, 0xc7, 0xcc, 0x9c, 0xde, 0xe5, 0xb6, 0xd5, 0xd4, 0x05, 0x2f, 0x85, 0x99, 0xdf, 0x92, 0xee,
	0x3f, 0x0b, 0x5c, 0xda, 0x23, 0xc7, 0xee, 0x2f, 0x26, 0xc7, 0xe1, 0xee, 0x9e, 0x9e, 0x3b, 0x12,
	0x2d, 0xed, 0x5f, 0xe7, 0x12, 0x39, 0x08, 0x5d, 0xc0, 0xeb, 0xe7, 0xd7, 0xfb, 0x6c, 0x0e, 0x06,
	0xfb, 0x0a, 0x29, 0xb2, 0xdf, 0x0a, 0xbc, 0x15, 0x06, 0x0e, 0xc7, 0x2b, 0x4d, 0xe4, 0xda, 0xff,
	0x2e, 0x59, 0x8e, 0x25, 0x0b, 0x38, 0xfb, 0x29, 0x41, 0x19, 0xcd, 0x57, 0xc5, 0xe6, 0x64, 0x7c,
	0xb1, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x2f, 0xc6, 0xcb, 0xe7, 0x01, 0x00, 0x00,
}
