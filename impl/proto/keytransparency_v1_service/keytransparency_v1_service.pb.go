// Code generated by protoc-gen-go.
// source: keytransparency_v1_service.proto
// DO NOT EDIT!

/*
Package keytransparency_v1_service is a generated protocol buffer package.

Key Transparency Service

The Key Transparency Service API consists of a map of user names to public
keys. Each user name also has a history of public keys that have been
associated with it.

It is generated from these files:
	keytransparency_v1_service.proto

It has these top-level messages:
*/
package keytransparency_v1_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keytransparency_v1_types "github.com/google/keytransparency/core/proto/keytransparency_v1_types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyService service

type KeyTransparencyServiceClient interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(ctx context.Context, in *keytransparency_v1_types.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(ctx context.Context, in *keytransparency_v1_types.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(ctx context.Context, in *keytransparency_v1_types.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.UpdateEntryResponse, error)
	GetMutationsByEpoch(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error)
	GetMutationsBySequence(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error)
	GetMutationsByEpochStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (KeyTransparencyService_GetMutationsByEpochStreamClient, error)
	GetMutationsBySequenceStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (KeyTransparencyService_GetMutationsBySequenceStreamClient, error)
}

type keyTransparencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyServiceClient(cc *grpc.ClientConn) KeyTransparencyServiceClient {
	return &keyTransparencyServiceClient{cc}
}

func (c *keyTransparencyServiceClient) GetEntry(ctx context.Context, in *keytransparency_v1_types.GetEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetEntryResponse, error) {
	out := new(keytransparency_v1_types.GetEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.service.KeyTransparencyService/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) ListEntryHistory(ctx context.Context, in *keytransparency_v1_types.ListEntryHistoryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.ListEntryHistoryResponse, error) {
	out := new(keytransparency_v1_types.ListEntryHistoryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.service.KeyTransparencyService/ListEntryHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) UpdateEntry(ctx context.Context, in *keytransparency_v1_types.UpdateEntryRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.UpdateEntryResponse, error) {
	out := new(keytransparency_v1_types.UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.service.KeyTransparencyService/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) GetMutationsByEpoch(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error) {
	out := new(keytransparency_v1_types.GetMutationsResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.service.KeyTransparencyService/GetMutationsByEpoch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) GetMutationsBySequence(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (*keytransparency_v1_types.GetMutationsResponse, error) {
	out := new(keytransparency_v1_types.GetMutationsResponse)
	err := grpc.Invoke(ctx, "/keytransparency.v1.service.KeyTransparencyService/GetMutationsBySequence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) GetMutationsByEpochStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (KeyTransparencyService_GetMutationsByEpochStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KeyTransparencyService_serviceDesc.Streams[0], c.cc, "/keytransparency.v1.service.KeyTransparencyService/GetMutationsByEpochStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyServiceGetMutationsByEpochStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparencyService_GetMutationsByEpochStreamClient interface {
	Recv() (*keytransparency_v1_types.GetMutationsResponse, error)
	grpc.ClientStream
}

type keyTransparencyServiceGetMutationsByEpochStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyServiceGetMutationsByEpochStreamClient) Recv() (*keytransparency_v1_types.GetMutationsResponse, error) {
	m := new(keytransparency_v1_types.GetMutationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyTransparencyServiceClient) GetMutationsBySequenceStream(ctx context.Context, in *keytransparency_v1_types.GetMutationsRequest, opts ...grpc.CallOption) (KeyTransparencyService_GetMutationsBySequenceStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KeyTransparencyService_serviceDesc.Streams[1], c.cc, "/keytransparency.v1.service.KeyTransparencyService/GetMutationsBySequenceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyTransparencyServiceGetMutationsBySequenceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyTransparencyService_GetMutationsBySequenceStreamClient interface {
	Recv() (*keytransparency_v1_types.GetMutationsResponse, error)
	grpc.ClientStream
}

type keyTransparencyServiceGetMutationsBySequenceStreamClient struct {
	grpc.ClientStream
}

func (x *keyTransparencyServiceGetMutationsBySequenceStreamClient) Recv() (*keytransparency_v1_types.GetMutationsResponse, error) {
	m := new(keytransparency_v1_types.GetMutationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KeyTransparencyService service

type KeyTransparencyServiceServer interface {
	// GetEntry returns a user's entry in the Merkle Tree.
	//
	// Entries contain signed commitments to a profile, which is also returned.
	GetEntry(context.Context, *keytransparency_v1_types.GetEntryRequest) (*keytransparency_v1_types.GetEntryResponse, error)
	// ListEntryHistory returns a list of historic GetEntry values.
	//
	// Clients verify their account history by observing correct values for their
	// account over time.
	ListEntryHistory(context.Context, *keytransparency_v1_types.ListEntryHistoryRequest) (*keytransparency_v1_types.ListEntryHistoryResponse, error)
	// UpdateEntry updates a user's profile.
	//
	// Returns the current user profile.
	// Clients must retry until this function returns a proof containing the desired value.
	UpdateEntry(context.Context, *keytransparency_v1_types.UpdateEntryRequest) (*keytransparency_v1_types.UpdateEntryResponse, error)
	GetMutationsByEpoch(context.Context, *keytransparency_v1_types.GetMutationsRequest) (*keytransparency_v1_types.GetMutationsResponse, error)
	GetMutationsBySequence(context.Context, *keytransparency_v1_types.GetMutationsRequest) (*keytransparency_v1_types.GetMutationsResponse, error)
	GetMutationsByEpochStream(*keytransparency_v1_types.GetMutationsRequest, KeyTransparencyService_GetMutationsByEpochStreamServer) error
	GetMutationsBySequenceStream(*keytransparency_v1_types.GetMutationsRequest, KeyTransparencyService_GetMutationsBySequenceStreamServer) error
}

func RegisterKeyTransparencyServiceServer(s *grpc.Server, srv KeyTransparencyServiceServer) {
	s.RegisterService(&_KeyTransparencyService_serviceDesc, srv)
}

func _KeyTransparencyService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.service.KeyTransparencyService/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetEntry(ctx, req.(*keytransparency_v1_types.GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_ListEntryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.ListEntryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.service.KeyTransparencyService/ListEntryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).ListEntryHistory(ctx, req.(*keytransparency_v1_types.ListEntryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.service.KeyTransparencyService/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).UpdateEntry(ctx, req.(*keytransparency_v1_types.UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_GetMutationsByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.GetMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetMutationsByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.service.KeyTransparencyService/GetMutationsByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetMutationsByEpoch(ctx, req.(*keytransparency_v1_types.GetMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_GetMutationsBySequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keytransparency_v1_types.GetMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).GetMutationsBySequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keytransparency.v1.service.KeyTransparencyService/GetMutationsBySequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).GetMutationsBySequence(ctx, req.(*keytransparency_v1_types.GetMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_GetMutationsByEpochStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(keytransparency_v1_types.GetMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServiceServer).GetMutationsByEpochStream(m, &keyTransparencyServiceGetMutationsByEpochStreamServer{stream})
}

type KeyTransparencyService_GetMutationsByEpochStreamServer interface {
	Send(*keytransparency_v1_types.GetMutationsResponse) error
	grpc.ServerStream
}

type keyTransparencyServiceGetMutationsByEpochStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyServiceGetMutationsByEpochStreamServer) Send(m *keytransparency_v1_types.GetMutationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KeyTransparencyService_GetMutationsBySequenceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(keytransparency_v1_types.GetMutationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyTransparencyServiceServer).GetMutationsBySequenceStream(m, &keyTransparencyServiceGetMutationsBySequenceStreamServer{stream})
}

type KeyTransparencyService_GetMutationsBySequenceStreamServer interface {
	Send(*keytransparency_v1_types.GetMutationsResponse) error
	grpc.ServerStream
}

type keyTransparencyServiceGetMutationsBySequenceStreamServer struct {
	grpc.ServerStream
}

func (x *keyTransparencyServiceGetMutationsBySequenceStreamServer) Send(m *keytransparency_v1_types.GetMutationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _KeyTransparencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keytransparency.v1.service.KeyTransparencyService",
	HandlerType: (*KeyTransparencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _KeyTransparencyService_GetEntry_Handler,
		},
		{
			MethodName: "ListEntryHistory",
			Handler:    _KeyTransparencyService_ListEntryHistory_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _KeyTransparencyService_UpdateEntry_Handler,
		},
		{
			MethodName: "GetMutationsByEpoch",
			Handler:    _KeyTransparencyService_GetMutationsByEpoch_Handler,
		},
		{
			MethodName: "GetMutationsBySequence",
			Handler:    _KeyTransparencyService_GetMutationsBySequence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMutationsByEpochStream",
			Handler:       _KeyTransparencyService_GetMutationsByEpochStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMutationsBySequenceStream",
			Handler:       _KeyTransparencyService_GetMutationsBySequenceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "keytransparency_v1_service.proto",
}

func init() { proto.RegisterFile("keytransparency_v1_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x4b, 0xe3, 0x40,
	0x14, 0xc7, 0xc9, 0x1e, 0x96, 0x32, 0xbb, 0x87, 0x65, 0xca, 0x16, 0x36, 0xed, 0xc2, 0x6e, 0x7b,
	0xea, 0xb2, 0xcd, 0x6c, 0xba, 0x37, 0x8f, 0x42, 0xa9, 0xa0, 0x5e, 0xac, 0x9e, 0xc3, 0x34, 0x7d,
	0xa4, 0xa1, 0x76, 0x66, 0x9c, 0x99, 0x04, 0x42, 0xa9, 0x07, 0xbf, 0x82, 0x08, 0x82, 0xe0, 0x55,
	0xf0, 0xeb, 0xf8, 0x09, 0x04, 0x3f, 0x88, 0x24, 0x99, 0x48, 0x2d, 0x89, 0xd4, 0x83, 0xd0, 0x53,
	0x0e, 0xef, 0xf7, 0xde, 0xfb, 0xe5, 0xff, 0x60, 0xd0, 0xaf, 0x19, 0x24, 0x5a, 0x52, 0xa6, 0x04,
	0x95, 0xc0, 0xfc, 0xc4, 0x8b, 0x5d, 0x4f, 0x81, 0x8c, 0x43, 0x1f, 0x1c, 0x21, 0xb9, 0xe6, 0xd8,
	0x5e, 0x23, 0x9c, 0xd8, 0x75, 0x0c, 0x61, 0x4f, 0x82, 0x50, 0x4f, 0xa3, 0xb1, 0xe3, 0xf3, 0x39,
	0x09, 0x38, 0x0f, 0x4e, 0x81, 0xac, 0xd1, 0xc4, 0xe7, 0x12, 0x48, 0x36, 0x89, 0x94, 0xac, 0xd2,
	0x89, 0x00, 0x55, 0x59, 0xc8, 0x0d, 0xec, 0x96, 0x19, 0x4d, 0x45, 0x48, 0x28, 0x63, 0x5c, 0x53,
	0x1d, 0x72, 0x66, 0xaa, 0xfd, 0xc7, 0x1a, 0x6a, 0xec, 0x43, 0x72, 0xbc, 0x32, 0x60, 0x94, 0xeb,
	0xe1, 0x73, 0x54, 0x1b, 0x82, 0x1e, 0x30, 0x2d, 0x13, 0xdc, 0x75, 0x4a, 0xfe, 0x23, 0xdf, 0x52,
	0x30, 0x47, 0x70, 0x16, 0x81, 0xd2, 0xf6, 0x9f, 0x4d, 0x50, 0x25, 0x38, 0x53, 0xd0, 0x6e, 0x5e,
	0x3c, 0x3c, 0x5d, 0x7e, 0xfa, 0x8e, 0xeb, 0x24, 0x76, 0x49, 0xa4, 0x40, 0x2a, 0xb2, 0x48, 0x3f,
	0x5e, 0x38, 0x59, 0xe2, 0x5b, 0x0b, 0x7d, 0x3b, 0x08, 0x55, 0xde, 0xb2, 0x17, 0x2a, 0xcd, 0x65,
	0x82, 0xdd, 0xea, 0xe9, 0xeb, 0x6c, 0x21, 0xd4, 0x7f, 0x4f, 0x8b, 0x11, 0xeb, 0x64, 0x62, 0x3f,
	0x71, 0xb3, 0x44, 0x8c, 0x4c, 0x8d, 0xcb, 0x95, 0x85, 0xbe, 0x9c, 0x88, 0x09, 0xd5, 0x90, 0x87,
	0xf4, 0xb7, 0x7a, 0xd1, 0x0a, 0x56, 0x68, 0xf5, 0x36, 0xa4, 0x8d, 0x51, 0x37, 0x33, 0xea, 0xd8,
	0x65, 0x51, 0xed, 0x7c, 0x85, 0x94, 0xf5, 0xa2, 0xac, 0x0f, 0x5f, 0x5b, 0xa8, 0x3e, 0x04, 0x7d,
	0x18, 0x99, 0x53, 0xef, 0x26, 0x03, 0xc1, 0xfd, 0x29, 0xee, 0xbd, 0x79, 0x99, 0x17, 0xbc, 0x10,
	0x74, 0x36, 0xc5, 0x8d, 0x61, 0x3b, 0x33, 0x6c, 0x61, 0x3b, 0x35, 0x9c, 0x17, 0x65, 0xb2, 0x10,
	0x34, 0x00, 0x4f, 0xf3, 0x19, 0xb0, 0x25, 0xbe, 0xb1, 0x50, 0xe3, 0xb5, 0xda, 0x28, 0xdd, 0xc6,
	0x7c, 0xd8, 0x06, 0xbb, 0x3b, 0x0b, 0xfd, 0x28, 0x09, 0x6e, 0xa4, 0x25, 0xd0, 0xf9, 0x47, 0x0b,
	0x9a, 0x03, 0xe3, 0xdf, 0xd5, 0x82, 0x44, 0x65, 0x26, 0xff, 0x2c, 0x7c, 0x6f, 0xa1, 0x56, 0x79,
	0x8e, 0xdb, 0x27, 0x3b, 0xfe, 0x9c, 0x3d, 0x35, 0xff, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21,
	0x32, 0xe0, 0x95, 0x2e, 0x05, 0x00, 0x00,
}
